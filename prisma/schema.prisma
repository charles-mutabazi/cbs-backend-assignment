// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  names          String
  email          String    @unique
  password       String
  hierarchyLevel Int       @default(1) // Represents the seniority level of the employee
  bookings       Booking[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Vehicle {
  id           Int       @id @default(autoincrement())
  name         String
  licensePlate String
  capacity     Int
  bookings     Booking[]
  driver       Driver?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Booking {
  id           Int           @id @default(autoincrement())
  userId       Int
  vehicleId    Int
  driverId     Int?
  slotDateTime DateTime
  destination  String
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  driver  Driver? @relation(fields: [driverId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  OVERRIDDEN
}

model Driver {
  id        Int       @id @default(autoincrement())
  names     String
  email     String    @unique
  password  String
  vehicle   Vehicle?  @relation(fields: [vehicleId], references: [id])
  vehicleId Int?      @unique // Ensures a 1-1 relationship
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
